#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Upload changes to Github:
# git commit -a
# git push origin master
# git push origin btnctrl
# Update from Github
# git pull

# https://github.com/alastair/spotifile

import os
import logging
import urllib2
import threading
import sys
import unicodedata
import datetime
import signal
import spotify

# To load config file
import ConfigParser

global online

def do_read_settings(line):
        # Load & read configuration
        # Settings are stored in a file called "settings".
        # Example:
        # [Spotify]
        # username=<Spotify username>
        # pass=<Spotify password>

        #print "Load"
        config = ConfigParser.ConfigParser()
        try:
            print "Load settings!"
            config.read("settings.txt")
        except:
            print "Settings file not found"
            sys.exit()
        print config.sections()

        try:
            global uri
            uri = ""
            options = config.options("Spotify")
            global username
            try:
                username = config.get("Spotify", "username")
            except:
                print "No username given"
            global password
            password = config.get("Spotify", "pass")
            #print "Credentials: " + username + ":" + password
            global autoplay
            try:
                autoplay = config.get("General", "autoplay")
                print "Autoplay: " + autoplay
            except:
                print "No autoplay setting found"

            global savedtrack
            global playlistnr

            try:
                uri = config.get("CurrentTrack", "playlist")
                print "Get playlist..."
            except:
                #uri = "spotify:user:phermansson:playlist:7JaJFymSwbFcceatOd40Af"
                pass
            try:
                savedtrack = config.get("CurrentTrack", "track")

            except:
                pass
            #savedtrack = "spotify:track:583jvp9iPtaOphRa74h0A8"

            #global trackindex
            #trackindex = int(Config.get("CurrentTrack", "trackindex"))
            #try:
            # playlistnr = int(Config.get("playlist", "playlistnr"))
            #except:
            # "No playlistnumbed saved"
            # playlistnr = 0
        except:
            print "Error reading settings"
            sys.exit(0)

        if len(uri)==0:
            print "No uri saved"
            global nouri
            nouri = 1
        else:
            nouri = 0
        if len(savedtrack)==0:
            print "No track saved"
        global notrack
        notrack = 1


def internet_on():
    print "Check connection"
    try:
        response=urllib2.urlopen('http://google.se',timeout=5)
        #print "On"
        return True
    except urllib2.URLError as err: pass
    #print "Off"
    return False

def on_logged_in(session, error_type):
    assert error_type == spotify.ErrorType.OK, 'Login failed'
    logged_in.set()

if __name__ == '__main__':
    #logging.basicConfig(level=logging.INFO)
    try:
        print "Welcome to Autospot \n"
        online = internet_on()
        if online == True:
            onlinestatus="online"
        else:
            onlinestatus="offline"
        print "Online?: " + onlinestatus
    except:
        pass
    
    # Assuming a spotify_appkey.key in the current dir
    session = spotify.Session()

    # Process events in the background
    loop = spotify.EventLoop(session)
    loop.start()

    # Events for coordination
    logged_in = threading.Event()
    end_of_track = threading.Event()
    # Register event listeners
    session.on(spotify.SessionEvent.LOGGED_IN, on_logged_in)
    
    # Create audio sink
    print "Check audio subsystem:"
    try:
        audio_driver = spotify.AlsaSink(session)
        print "Audio ok"
    except ImportError:
        logger.warning(
            'No audio sink found; audio playback unavailable.')

    # Load settings
    print "Read settings"
    do_read_settings("dummy")
    # Assuming a previous login with remember_me=True and a proper logout
    print "Credentials: " + username + ":" + password
            
    session.login(conf.username, conf.password)

    logged_in.wait()
    
    
