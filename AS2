#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Upload changes to Github:
# git commit -a
# git push origin master
# git push origin btnctrl
# Update from Github
# git pull

# https://github.com/alastair/spotifile

import os
import logging
import urllib2
import threading
import sys
import unicodedata
import datetime
import signal
import time
import spotify
# Import file with settings (settings.py):
import settings

global online


def internet_on():
    print "Check connection"
    try:
        response=urllib2.urlopen('http://google.se',timeout=5)
        #print "On"
        return True
    except urllib2.URLError as err: pass
    #print "Off"
    return False

def on_logged_in(session, error_type):
    assert error_type == spotify.ErrorType.OK, 'Login failed'
    print "Logged in"
    logged_in.set()

def contLoaded(session, error_type):
    print "Container loaded"

if __name__ == '__main__':
    #logging.basicConfig(level=logging.INFO)
    try:
        print "Welcome to Autospot \n"
        online = internet_on()
        if online == True:
            onlinestatus="online"
        else:
            onlinestatus="offline"
        print "Online?: " + onlinestatus
    except:
        pass
    
    # Assuming a spotify_appkey.key in the current dir
    session = spotify.Session()

    # Process events in the background
    loop = spotify.EventLoop(session)
    loop.start()

    # Events for coordination
    logged_in = threading.Event()
    end_of_track = threading.Event()
    # Register event listeners
    session.on(spotify.SessionEvent.LOGGED_IN, on_logged_in)
    #session.on(spotify.PlaylistEvent.TRACKS_ADDED, contLoaded)
    session.on(spotify.PlaylistContainerEvent.CONTAINER_LOADED, contLoaded)

    # Create audio sink
    print "Check audio subsystem:"
    try:
        audio_driver = spotify.AlsaSink(session)
        print "Audio ok"
    except ImportError:
        logger.warning(
            'No audio sink found; audio playback unavailable.')

    # Login
    print settings.username + " : " + settings.password
    session.login(settings.username, settings.password)
    logged_in.wait()
    # Load playlist container
    container = session.playlist_container
    container.load
    while not container.load:
            pass
    print "C loaded"
    print "You have " + str(len(container)) + " playlists."
    
    # First playlist
    #print "Container:" + str(container[1]) # == Playlist(u'spotify:user:phermansson:playlist:2Zkhao8VTWPfVD1oeha5I4')
    # Form data for get_playlist
    pl = str(container[1]).split(":")
    pluser = pl[2]
    pluri = pl[4].split("'")
    #print pluser + pluri[0] # == phermansson5Lg5sAr6bKzEYCq8LbewLM
    # Should be like "'spotify:user:fiat500c:playlist:54k50VZdvtnIPt4d8RBCmZ'"
    getpluri = "spotify:user:" + pluser + ":playlist:" + pluri[0]
    #print getpluri
    playlist = session.get_playlist(getpluri)
    #print playlist.load().name
    
    # Create a list with the playlists tracks
    nooftracks = len(playlist.tracks)
    playlisturis=[]
    for x in range(0, nooftracks):
        curtrack = str(playlist.tracks[x])
        curtrackuri = curtrack.split("'")
        playlisturis.append(curtrackuri[1])
    #print playlisturis[1]
    track = session.get_track( playlisturis[1]).load()
    #print track
    trackname=track.load().name
    curtrack = unicodedata.normalize('NFKD', trackname).encode('ascii', 'ignore')
    print curtrack
    session.player.load(track)
    session.player.play()
    time.sleep(2)
    print session.player.state
