#!/usr/bin/env python
# -*- coding: iso-8859-1 -*-

# Upload changes to Github:
# git commit -a
# git push origin master
# git push origin btnctrl
# Update from Github
# git pull

# https://github.com/alastair/spotifile

import os
import logging
import urllib2
import threading
import sys
import unicodedata
import datetime
import signal
import time
import spotify

# Keyboard input
import tty, termios

# Import file with settings (settings.py):
import settings

import player

global online

# Get keyboard presses
# http://www.instructables.com/id/Controlling-a-Raspberry-Pi-RC-Car-With-a-Keyboard/?ALLSTEPS
def getch():
    fd = sys.stdin.fileno()
    old_settings = termios.tcgetattr(fd)
    try:
        tty.setraw(sys.stdin.fileno())
        ch = sys.stdin.read(1)
    finally:
        termios.tcsetattr(fd, termios.TCSADRAIN, old_settings)
    return ch

def internet_on():
    print "Check connection"
    try:
        response=urllib2.urlopen('http://google.se',timeout=2)
        #print "On"
        return True
    except urllib2.URLError as err: pass
    #print "Off"
    return False

def on_logged_in(session, error_type):
    assert error_type == spotify.ErrorType.OK, 'Login failed'
    print "Logged in"
    logged_in.set()
    
def on_end_of_track(session):
    print "Track ended"
    nextTrack()

def contLoaded(session, error_type):
    print "Container loaded"
def nextTrack():
    global trackindex
    global nooftracks
    print "In nextTrack: Pl has " + str(nooftracks) + " tracks"
    if(trackindex<=nooftracks-1):
        #print playlisturis[trackindex]
        trackindex+=1
        print "Trackindex: " + str(trackindex) + "/" + str(nooftracks) 
        dur = track.load().duration
        print str(dur/1000) + " sec"
        play(playlisturis[trackindex])
        time.sleep(2)
        print session.player.state
    
        # Debug: Jump to end of track to see end of track callback
        #session.player.seek(dur-100)
    else:
        print "End of playlist"
        
def prevTrack():
    global trackindex
    global nooftracks
    if(trackindex>=0):
        print "trackindex" + str(trackindex) + "/" + str(nooftracks) 
        print playlisturis[trackindex]
        trackindex-=1
        play(playlisturis[trackindex])
    else:
        print "End of playlist"
        
def changePl(dir):
    print dir
    global playlistnr
    global trackindex
    global nooftracks
    global playlisturis
    trackindex = 1
    # Next or previous playlist?
    if(dir=="next"):
        playlistnr+=1
    elif(dir=="prev"):
        playlistnr-=1
    else:
        print "Playlist change error"
    print "Playlist # " +str(playlistnr)
    pl = str(container[playlistnr]).split(":")
    #print pl
    pluser = pl[2]
    pluri = pl[4].split("'")
    #print pluser + pluri[0] # == phermansson5Lg5sAr6bKzEYCq8LbewLM
    # Should be like "'spotify:user:fiat500c:playlist:54k50VZdvtnIPt4d8RBCmZ'"
    getpluri = "spotify:user:" + pluser + ":playlist:" + pluri[0]
    #print getpluri
    playlist = session.get_playlist(getpluri)
    #print playlist
    curpl = unicodedata.normalize('NFKD', playlist.load().name).encode('ascii', 'ignore')
    print curpl
    
    # Create a list with the playlists tracks
    nooftracks = len(playlist.tracks)
    print str(nooftracks) + " tracks."
    playlisturis=[]
    for x in range(0, nooftracks):
        curtrack = str(playlist.tracks[x])
        curtrackuri = curtrack.split("'")
        playlisturis.append(curtrackuri[1])
    #print playlisturis[1]
    track = session.get_track( playlisturis[1]).load()
    #trackindex=0
    #print track
    trackname=track.load().name
    curtrack = unicodedata.normalize('NFKD', trackname).encode('ascii', 'ignore')
    print str(trackindex) + " " + curtrack
    
    dur = track.load().duration
    print str(dur/1000) + " sec"
    
    session.player.load(track)
    session.player.play()
    time.sleep(2)
    print session.player.state
    
    # Debug: Jump to end of track to see end of track callback
    #session.player.seek(dur-100)
    

def play(curtrack):
    print "In play, curtrack=" + str(curtrack)
    track = session.get_track(curtrack).load()
    #print track
    trackname=track.load().name
    
    dur = track.load().duration
    print "Track:" + trackname + " length:" + str(dur)
    
    # Get artist code
    artist=track.load().artists
    #print artist
    temp = str(artist).split(":")
    #print temp
    art = temp[2].split("'")
    #print art[0]
    artisturi="spotify:artist:" + art[0]
    artist = session.get_artist(artisturi)
    artistname = artist.load().name
    """artist = session.get_artist(
...     'spotify:artist:22xRIphSN7IkPVbErICu7s')
>>> artist.load().name"""
    
    curtrack = unicodedata.normalize('NFKD', trackname).encode('ascii', 'ignore')
    curartist = unicodedata.normalize('NFKD', artistname).encode('ascii', 'ignore')

    print curartist + "-" + curtrack
    session.player.load(track)
    session.player.play()
    
def loadPlaylist(getpluri):
    # Create a list with the playlists tracks
    global playlisturis
    global nooftracks
    print "In loadPlaylist"
    print "getpluri=" + getpluri
    playlist = session.get_playlist(getpluri)
    print "Playlist name: " + playlist.load().name
    nooftracks = len(playlist.tracks)
    playlisturis=[]
    for x in range(0, nooftracks):
        curtrack = str(playlist.tracks[x])
        curtrackuri = curtrack.split("'")
        playlisturis.append(curtrackuri[1])
    #print playlisturis[1]
    track = session.get_track( playlisturis[1]).load()
    trackindex=0
    #print track
    trackname=track.load().name
    curtrack = unicodedata.normalize('NFKD', trackname).encode('ascii', 'ignore')
    print "First track: " + curtrack    
    play(curtrackuri[1])

def cleanexit():
    # Save info
    global uri
    global trackindex
    global playlistnr
    print "Username: " + username
    print "Password: " + password
    print "Playlist:" + str(uri) + "(" + str(playlistnr) + "), track " + str(trackindex)
    
    file = open("settings.py", "w")
    file.write("username=\"" + username+"\"\n")
    file.write("password=\"" + password+"\"\n")
    file.write("playlist=\"" + str(uri)+"\"\n")
    file.write("trackindex=\"" + str(trackindex)+"\"\n")
    file.write("playlistnr=\"" + str(playlistnr)+"\"\n")
    file.close()
    
    print "Bye!"
    sys.exit(1)


if __name__ == '__main__':
    #logging.basicConfig(level=logging.INFO)
    global playlistnr
    
    try:
        print "Welcome to Autospot \n"
        online = internet_on()
        if online == True:
            onlinestatus="online"
        else:
            onlinestatus="offline"
        print "Online?: " + onlinestatus
    except:
        pass
    
    print "6-Next track\n4-Previous track\n8-Next Pl\n2-Prev pl"
    
    # Assuming a spotify_appkey.key in the current dir
    session = spotify.Session()

    # Process events in the background
    loop = spotify.EventLoop(session)
    loop.start()

    # Events for coordination
    logged_in = threading.Event()
    end_of_track = threading.Event()
    # Register event listeners
    session.on(spotify.SessionEvent.LOGGED_IN, on_logged_in)
    session.on(spotify.SessionEvent.END_OF_TRACK, on_end_of_track)
    #session.on(spotify.PlaylistEvent.TRACKS_ADDED, contLoaded)
    session.on(spotify.PlaylistContainerEvent.CONTAINER_LOADED, contLoaded)

    # Create audio sink
    print "Check audio subsystem:"
    try:
        audio_driver = spotify.AlsaSink(session)
        print "Audio ok"
    except ImportError:
        logger.warning(
            'No audio sink found; audio playback unavailable.')
    try:
        pl = settings.playlist
        trackindex = settings.trackindex
        strPlaylistnr=settings.playlistnr
        playlistnr = int(strPlaylistnr)
        print "We have a saved playlist"
        print "Playlist" + str(pl) + ", (" + str(playlistnr) + "), track " + str(trackindex)
    except: 
        print "Unexpected error:", sys.exc_info()[0]
        print "No playlist saved!"
        pl=""
        trackindex=0
        playlistnr=0
    try:
        username = settings.username
        password = settings.password
        print username + "-" + password
    except: 
        print "No username or password given"
        sys.exit(0)
    # Login
    session.login(username, password)
    logged_in.wait()
    # Load playlist container
    container = session.playlist_container
    container.load
    while not container.load:
            pass
    print "Container loaded"
    print "You have " + str(len(container)) + " playlists."
    
    # First playlist
    #print "Container:" + str(container[1]) # == Playlist(u'spotify:user:phermansson:playlist:2Zkhao8VTWPfVD1oeha5I4')
    if not pl:
        global uri
        # No saved playlist, get the first
        # Form data for get_playlist
        playlistnr = 1
        pl = str(container[playlistnr]).split(":")
        pluser = pl[2]
        pluri = pl[4].split("'")
        uri = pluri[0]
        print "Uri:" + str(uri)
        #print pluser + pluri[0] # == phermansson5Lg5sAr6bKzEYCq8LbewLM
        # Should be like "'spotify:user:fiat500c:playlist:54k50VZdvtnIPt4d8RBCmZ'"
        getpluri = "spotify:user:" + pluser + ":playlist:" + pluri[0]
        #print getpluri
    else: 
        getpluri = "spotify:user:" + username + ":playlist:" + pl
        print "Using saved playlist: " + getpluri
    
    #getpluri is the current playlist
    loadPlaylist(getpluri)
    
    # Infinite loop
    while True:
        char = getch()
        print char
        if(char == "6"):
            nextTrack()
        if(char == "4"):
            prevTrack()
        if(char == "8"):
            changePl("next")
        if(char == "2"):
            changePl("prev")
        if(char == "q"):           
            cleanexit()
